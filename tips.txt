v_139=relation between products items comments
v_141=customize django user https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#a-full-example
USERNAME_FIELD that filed is unique and use it for login
v_142=code taeid
v-146 = https://docs.djangoproject.com/en/5.0/ref/forms/validation/
v_147=validation error:slug field
for slug we don't need validator but for char filed we need it
import -->from django.core import validators
FOR CHANGE LANGUAGE OF PROJECT YOU MUST CHANGE LANGUAGE CODE IN SETTING SECTION  "fa_ir"
https://www.geeksforgeeks.org/python-form-validation-using-django/
v_148=validation error for form totally
{% for error in form.non_field_errors%} in html for show it
also you can write custom validator
v_149=sms for register
v_150=register with number,senario
v_151=register with number (  code )
v_152=register with number (  code ) --> import tip return redirect(reverse("account:user_checkcode")+ f'?phone={cd["phone"]}')
v_153=user hide phone register with ####uniqe token###
v_154=user hide phone register (uuid random token with time)( if user existed use User.objects.get_or_create)
v_155=information about Meta class
v_156=email rejister ""https://docs.djangoproject.com/en/5.0/topics/auth/customizing/""
login with phone and email at the same time
v_157=user backend for login and rejister , validation error for phone otp
v_158=fix deatial
v_160= manage products
v_161= manage products
v-162=manage products details
v-163=manage products details
v-164=session add product to basket without register ___>inspect ___ application , session id
v-165=cart
v-166=cart_addd product
v_167=cart_add product _ request
v_168=cart_add product _ make cart module
v-169=cart_add product _ make cart module ____important
v_170=cart_delete product
v_171=check out _model _ admin panel __important
v_172=check out _model
v_173=add address
v_174=pay_total , pay page
v_175=remove basket iteam ,pay ,TIP(***NEXT PAGE**)
v_176=offer code
v_177,v_178=papal__zarin pal django search (code is not complate)
v_179=visibility of page for user(from django.contrib.auth.mixins import LoginRequiredMixin),next
v_180=django caching-->load page faster,redis,  make project faster
v_181=django caching--> use redis ,all view cashing : https://docs.djangoproject.com/en/5.0/topics/cache/
v_182=django caching ___> just part of project , in template { % load caching     % } , {% cache second name %}
{%  end caching   %}
sleep data in view we can use sleep()  , from time import sleep
v_183=instead categoris
v_184=instead categoris